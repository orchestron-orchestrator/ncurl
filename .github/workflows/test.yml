name: Test

on:
  push:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actonlang/setup-acton@v1
        with:
          channel: 'tip'
      - name: "Check out repository code"
        uses: actions/checkout@v4
      - name: "Cache acton stuff"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/acton
            out
          # Hacky cache update:
          # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
          key: acton-${{ github.run_id }}
          restore-keys: |
            acton
      - run: acton build --dev
      - name: "Start notconf in background"
        run: |
          docker run -td --name notconf --publish 42830:830 ghcr.io/notconf/notconf
      - run: acton test
      - name: "Test ncurl list-schemas"
        run: ./ncurl list-schemas
      - name: "Test ncurl get-config"
        run: ./ncurl get-config
      - name: "Test ncurl get-config with subtree filter"
        run: ./ncurl get-config --filter-subtree '<netconf-server xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-server"/>'
      - name: "Test ncurl get-config and save to file"
        run: |
          ./ncurl get-config --output test-config.xml
          test -f test-config.xml
      - name: "Test ncurl get-schema for specific schema"
        run: ./ncurl get-schema ietf-netconf-monitoring
      - name: "Test ncurl get-schema for all schemas"
        run: ./ncurl get-schema all
      - name: "Test ncurl verbose mode"
        run: ./ncurl --verbose list-schemas
      # TODO: There is a problem with YANG compiler/parser with notconf (netopeer2) schemas
      # This test is expected to fail until the issue is resolved
      - name: "Test ncurl get-config with JSON format"
        run: ./ncurl get-config --format json
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: ncurl-linux-x86_64
          path: out/bin/ncurl
      - run: make build-linux-aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: ncurl-linux-aarch64
          path: out/bin/ncurl
      - run: make build-macos-aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: ncurl-macos-aarch64
          path: out/bin/ncurl

  release:
    # Only run on the main branch
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      # Required for uploading release assets
      contents: write
    needs: build-and-test
    env:
      TAG: tip
    steps:
      - name: "Check out repository code"
        uses: actions/checkout@v4
      - name: Delete tag
        run: gh release delete ${{ env.TAG }} --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Download all binary artifacts"
        uses: actions/download-artifact@v4
        with:
          pattern: ncurl-*
      - name: "Compress binary artifacts"
        run: |
          tar -czf ncurl-linux-x86_64.tar.gz -C ncurl-linux-x86_64 ncurl
          tar -czf ncurl-linux-aarch64.tar.gz -C ncurl-linux-aarch64 ncurl
          tar -czf ncurl-macos-aarch64.tar.gz -C ncurl-macos-aarch64 ncurl
      - name: "Upload artifacts as release packages"
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "ncurl-*.tar.gz"
          draft: false
          prerelease: true
          name: ${{ env.TAG }}
          tag: ${{ env.TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          replacesArtifacts: true
